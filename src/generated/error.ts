// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.31.1
// source: error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "MyPackage.Messages";

export enum CallStatus {
  OK = 0,
  DECODE_ERROR = -1,
  INVALID_ARGUMENTS_DETAILS = 2,
  INVALID_ARGUMENTS = -2,
  UNKNOWN_ENUM_VALUE = -3,
  EMPTY_PARAMS = -4,
}

export function callStatusFromJSON(object: any): CallStatus {
  switch (object) {
    case 0:
    case "OK":
      return CallStatus.OK;
    case -1:
    case "DECODE_ERROR":
      return CallStatus.DECODE_ERROR;
    case 2:
    case "INVALID_ARGUMENTS_DETAILS":
      return CallStatus.INVALID_ARGUMENTS_DETAILS;
    case -2:
    case "INVALID_ARGUMENTS":
      return CallStatus.INVALID_ARGUMENTS;
    case -3:
    case "UNKNOWN_ENUM_VALUE":
      return CallStatus.UNKNOWN_ENUM_VALUE;
    case -4:
    case "EMPTY_PARAMS":
      return CallStatus.EMPTY_PARAMS;
    default:
      return CallStatus.DECODE_ERROR;
  }
}

export function callStatusToJSON(object: CallStatus): string {
  switch (object) {
    case CallStatus.OK:
      return "OK";
    case CallStatus.DECODE_ERROR:
      return "DECODE_ERROR";
    case CallStatus.INVALID_ARGUMENTS_DETAILS:
      return "INVALID_ARGUMENTS_DETAILS";
    case CallStatus.INVALID_ARGUMENTS:
      return "INVALID_ARGUMENTS";
    case CallStatus.UNKNOWN_ENUM_VALUE:
      return "UNKNOWN_ENUM_VALUE";
    case CallStatus.EMPTY_PARAMS:
      return "EMPTY_PARAMS";
    default:
      return "DECODE_ERROR";
  }
}

export interface Error {
  details: string;
}

function createBaseError(): Error {
  return { details: "" };
}

export const Error: MessageFns<Error> = {
  encode(message: Error, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== "") {
      writer.uint32(10).string(message.details);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Error {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.details = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Error {
    return { details: isSet(object.details) ? globalThis.String(object.details) : "" };
  },

  toJSON(message: Error): unknown {
    const obj: any = {};
    if (message.details !== "") {
      obj.details = message.details;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Error>, I>>(base?: I): Error {
    return Error.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Error>, I>>(object: I): Error {
    const message = createBaseError();
    message.details = object.details ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
